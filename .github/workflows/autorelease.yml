name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    timeout-minutes: 20
    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        ./bootstrap-vcpkg.sh
    - name: Setup Ninja
      uses: seanmiddleditch/gha-setup-ninja@v4
    - name: Setup CMake
      run: |
        cmake --version
    - name: Compiling...
      run: |
        mkdir build && cd build && cmake .. -G Ninja && ninja && cd ..
    - name: Check if the executable exists
      run: |
        if [ -f ./Release/r-type_client ] && [ -f ./Release/r-type_server ]; then exit 0; else exit 1; fi
      shell: bash

    - name: Upload binaries to release
      uses: actions/upload-artifact@v2
      with:
        name: binaries
        path: |
          ./Release/r-type_server
          ./Release/r-type_client

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    - name: Verification
      run: |
        ls
      shell: sh


    - name: Get commit message
      id: get_commit_message
      run: |
        commit_message=$(curl --location --request GET 'https://api.github.com/repos/$GITHUB_REPOSITORY/commits/${{ github.sha }}' \
        --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r ".commit.message")
        echo "::set-output name=commit_message::$commit_message"

    - name: Release pushed tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.get_commit_message.outputs.commit_message }}
      run: |
        gh release create "$tag" \
            --repo="$GITHUB_REPOSITORY" \
            --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
            --generate-notes

        if [ -f ./Release/r-type_client ] && [ -f ./Release/r-type_server ]; then 
          gh release upload "$tag" ./Release/r-type_client && \
          gh release upload "$tag" ./Release/r-type_server;
        else
          gh release upload "$tag" ./r-type_client && \
          gh release upload "$tag" ./r-type_server;
        fi